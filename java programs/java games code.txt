//Snake Game

package Sb;

import java.awt.*;
import java.awt.event.*;
import static java.lang.String.format;
import java.util.*;
import java.util.List;
import javax.swing.*;
 
public class SimpleSnake extends JPanel implements Runnable {
   enum Dir {
      up(0, -1), right(1, 0), down(0, 1), left(-1, 0);
 
      Dir(int x, int y) {
         this.x = x; this.y = y;
      }
 
      final int x, y;
   }
 
   static final Random rand = new Random();
   static final int WALL = -1;
   static final int MAX_ENERGY = 1500;
 
   volatile boolean gameOver = true;
 
   Thread gameThread;
   int score, hiScore;
   int nRows = 44;
   int nCols = 64;
   Dir dir;
   int energy;
 
   int[][] grid;
   List<Point> snake, treats;
   Font smallFont;
 
   public SimpleSnake() {
      setPreferredSize(new Dimension(640, 440));
      setBackground(Color.WHITE);
      setFont(new Font("TimesNewRoman", Font.BOLD, 48));
      setFocusable(true);
 
      smallFont = getFont().deriveFont(Font.BOLD, 18);
      initGrid();
 
      addMouseListener(
         new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
               if (gameOver) {
                  startNewGame();
                  repaint();
               }
            }
         });
 
      addKeyListener(
         new KeyAdapter() {
 
            @Override
            public void keyPressed(KeyEvent e) {
 
               switch (e.getKeyCode()) {
 
                  case KeyEvent.VK_UP:
                     if (dir != Dir.down)
                        dir = Dir.up;
                     break;
 
                  case KeyEvent.VK_LEFT:
                     if (dir != Dir.right)
                        dir = Dir.left;
                     break;
 
                  case KeyEvent.VK_RIGHT:
                     if (dir != Dir.left)
                        dir = Dir.right;
                     break;
 
                  case KeyEvent.VK_DOWN:
                     if (dir != Dir.up)
                        dir = Dir.down;
                     break;
               }
               repaint();
            }
         });
   }
 
   void startNewGame() {
      gameOver = false;
 
      stop();
      initGrid();
      treats = new LinkedList<>();
 
      dir = Dir.left;
      energy = MAX_ENERGY;
 
      if (score > hiScore)
         hiScore = score;
      score = 0;
 
      snake = new ArrayList<>();
      for (int x = 0; x < 7; x++)
         snake.add(new Point(nCols / 2 + x, nRows / 2));
 
      do
         addTreat();
      while(treats.isEmpty());
 
      (gameThread = new Thread(this)).start();
   }
 
   void stop() {
      if (gameThread != null) {
         Thread tmp = gameThread;
         gameThread = null;
         tmp.interrupt();
      }
   }
 
   void initGrid() {
      grid = new int[nRows][nCols];
      for (int r = 0; r < nRows; r++) {
         for (int c = 0; c < nCols; c++) {
            if (c == 0 || c == nCols - 1 || r == 0 || r == nRows - 1)
               grid[r][c] = WALL;
         }
      }
   }
 
   @Override
   public void run() {
 
      while (Thread.currentThread() == gameThread) {
 
         try {
            Thread.sleep(Math.max(75 - score, 25));
         } catch (InterruptedException e) {
            return;
         }
 
         if (energyUsed() || hitsWall() || hitsSnake()) {
            gameOver();
         } else {
            if (eatsTreat()) {
               score++;
               energy = MAX_ENERGY;
               growSnake();
            }
            moveSnake();
            addTreat();
         }
         repaint();
      }
   }
 
   boolean energyUsed() {
      energy -= 10;
      return energy <= 0;
   }
 
   boolean hitsWall() {
      Point head = snake.get(0);
      int nextCol = head.x + dir.x;
      int nextRow = head.y + dir.y;
      return grid[nextRow][nextCol] == WALL;
   }
 
   boolean hitsSnake() {
      Point head = snake.get(0);
      int nextCol = head.x + dir.x;
      int nextRow = head.y + dir.y;
      for (Point p : snake)
         if (p.x == nextCol && p.y == nextRow)
            return true;
      return false;
   }
 
   boolean eatsTreat() {
      Point head = snake.get(0);
      int nextCol = head.x + dir.x;
      int nextRow = head.y + dir.y;
      for (Point p : treats)
         if (p.x == nextCol && p.y == nextRow) {
            return treats.remove(p);
         }
      return false;
   }
 
   void gameOver() {
      gameOver = true;
      stop();
   }
 
   void moveSnake() {
      for (int i = snake.size() - 1; i > 0; i--) {
         Point p1 = snake.get(i - 1);
         Point p2 = snake.get(i);
         p2.x = p1.x;
         p2.y = p1.y;
      }
      Point head = snake.get(0);
      head.x += dir.x;
      head.y += dir.y;
   }
 
   void growSnake() {
      Point tail = snake.get(snake.size() - 1);
      int x = tail.x + dir.x;
      int y = tail.y + dir.y;
      snake.add(new Point(x, y));
   }
 
   void addTreat() {
      if (treats.size() < 3) {
 
         if (rand.nextInt(10) == 0) { // 1 in 10
 
            if (rand.nextInt(4) != 0) {  // 3 in 4
               int x, y;
               while (true) {
 
                  x = rand.nextInt(nCols);
                  y = rand.nextInt(nRows);
                  if (grid[y][x] != 0)
                     continue;
 
                  Point p = new Point(x, y);
                  if (snake.contains(p) || treats.contains(p))
                     continue;
 
                  treats.add(p);
                  break;
               }
            } else if (treats.size() > 1)
               treats.remove(0);
         }
      }
   }
 
   void drawGrid(Graphics2D g) {
      g.setColor(Color.black);
      for (int r = 0; r < nRows; r++) {
         for (int c = 0; c < nCols; c++) {
            if (grid[r][c] == WALL)
               g.fillRect(c * 10, r * 10, 10, 10);
         }
      }
   }
 
   void drawSnake(Graphics2D g) {
      g.setColor(Color.red);
      for (Point p : snake)
         g.fillRect(p.x * 10, p.y * 10, 10, 10);
 
      g.setColor(energy < 500 ? Color.red : Color.orange);
      Point head = snake.get(0);
      g.fillRect(head.x * 10, head.y * 10, 10, 10);
   }
 
   void drawTreats(Graphics2D g) {
      g.setColor(Color.green);
      for (Point p : treats)
         g.fillRect(p.x * 10, p.y * 10, 10, 10);
   }
 
   void drawStartScreen(Graphics2D g) {
      g.setColor(Color.red);
      g.setFont(getFont());
      g.drawString("SNAKE", 240, 190);
      g.setColor(Color.orange);
      g.setFont(smallFont);
      g.drawString("(Click To START)", 250, 240);
   }
 
   void drawScore(Graphics2D g) {
      int h = getHeight();
      g.setFont(smallFont);
      g.setColor(getForeground());
      String s = format("Hi-Score: %d    Score: %d", hiScore, score);
      g.drawString(s, 30, h - 30);
      g.drawString(format("Energy: %d", energy), getWidth() - 150, h - 30);
   }
 
   @Override
   public void paintComponent(Graphics gg) {
      super.paintComponent(gg);
      Graphics2D g = (Graphics2D) gg;
      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
             RenderingHints.VALUE_ANTIALIAS_ON);
 
      drawGrid(g);
 
      if (gameOver) {
         drawStartScreen(g);
      } else {
         drawSnake(g);
         drawTreats(g);
         drawScore(g);
      }
   }
 
   public static void main(String[] args) {
      SwingUtilities.invokeLater(
         () -> {
            JFrame mainFrame = new JFrame();
            mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            mainFrame.setTitle("SNAKE");
            mainFrame.setResizable(true);
            mainFrame.add(new SimpleSnake(), BorderLayout.CENTER);
            mainFrame.pack();
            mainFrame.setLocationRelativeTo(null);
            mainFrame.setVisible(true);
         });
   }
}


//Puzzle Game

//Game 1: Alphabet Game

package simpliGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.JOptionPane;

public class AlphabetGame extends Frame implements ActionListener {
	Button b1, b2, b3, b4, b5, b6, b7, b8, b9;

	AlphabetGame() {
		super("Puzzle - SimpliGame");
		b1 = new Button("A");
		b1.setBounds(50, 100, 40, 40);
		b2 = new Button("B");
		b2.setBounds(100, 100, 40, 40);
		b3 = new Button("C");
		b3.setBounds(150, 100, 40, 40);
		b4 = new Button("D");
		b4.setBounds(50, 150, 40, 40);
		b5 = new Button("E");
		b5.setBounds(100, 150, 40, 40);
		b6 = new Button("F");
		b6.setBounds(150, 150, 40, 40);
		b7 = new Button("G");
		b7.setBounds(50, 200, 40, 40);
		b8 = new Button("");
		b8.setBounds(100, 200, 40, 40);
		b9 = new Button("H");
		b9.setBounds(150, 200, 40, 40);

		b1.addActionListener(this);
		b2.addActionListener(this);
		b3.addActionListener(this);
		b4.addActionListener(this);
		b5.addActionListener(this);
		b6.addActionListener(this);
		b7.addActionListener(this);
		b8.addActionListener(this);
		b9.addActionListener(this);

		add(b1);
		add(b2);
		add(b3);
		add(b4);
		add(b5);
		add(b6);
		add(b7);
		add(b8);
		add(b9);
		setSize(400, 400);
		setLayout(null);
		setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == b1) {
			String label = b1.getLabel();
			if (b2.getLabel().equals("")) {
				b2.setLabel(label);
				b1.setLabel("");
			}
			if (b4.getLabel().equals("")) {
				b4.setLabel(label);
				b1.setLabel("");
			}
		}
		if (e.getSource() == b2) {
			String label = b2.getLabel();
			if (b1.getLabel().equals("")) {
				b1.setLabel(label);
				b2.setLabel("");
			}
			if (b3.getLabel().equals("")) {
				b3.setLabel(label);
				b2.setLabel("");
			}
			if (b5.getLabel().equals("")) {
				b5.setLabel(label);
				b2.setLabel("");
			}
		}
		if (e.getSource() == b3) {
			String label = b3.getLabel();
			if (b2.getLabel().equals("")) {
				b2.setLabel(label);
				b3.setLabel("");
			}
			if (b6.getLabel().equals("")) {
				b6.setLabel(label);
				b3.setLabel("");
			}
		}
		if (e.getSource() == b4) {
			String label = b4.getLabel();
			if (b1.getLabel().equals("")) {
				b1.setLabel(label);
				b4.setLabel("");
			}
			if (b7.getLabel().equals("")) {
				b7.setLabel(label);
				b4.setLabel("");
			}
			if (b5.getLabel().equals("")) {
				b5.setLabel(label);
				b4.setLabel("");
			}
		}
		if (e.getSource() == b5) {
			String label = b5.getLabel();
			if (b2.getLabel().equals("")) {
				b2.setLabel(label);
				b5.setLabel("");
			}
			if (b6.getLabel().equals("")) {
				b6.setLabel(label);
				b5.setLabel("");
			}
			if (b4.getLabel().equals("")) {
				b4.setLabel(label);
				b5.setLabel("");
			}
			if (b8.getLabel().equals("")) {
				b8.setLabel(label);
				b5.setLabel("");
			}
		}
		if (e.getSource() == b6) {
			String label = b6.getLabel();
			if (b9.getLabel().equals("")) {
				b9.setLabel(label);
				b6.setLabel("");
			}
			if (b3.getLabel().equals("")) {
				b3.setLabel(label);
				b6.setLabel("");
			}
			if (b5.getLabel().equals("")) {
				b5.setLabel(label);
				b6.setLabel("");
			}
		}
		if (e.getSource() == b7) {
			String label = b7.getLabel();
			if (b4.getLabel().equals("")) {
				b4.setLabel(label);
				b7.setLabel("");
			}
			if (b8.getLabel().equals("")) {
				b8.setLabel(label);
				b7.setLabel("");
			}
		}
		if (e.getSource() == b8) {
			String label = b8.getLabel();
			if (b9.getLabel().equals("")) {
				b9.setLabel(label);
				b8.setLabel("");
			}
			if (b7.getLabel().equals("")) {
				b7.setLabel(label);
				b8.setLabel("");
			}
			if (b5.getLabel().equals("")) {
				b5.setLabel(label);
				b8.setLabel("");
			}
		}
		if (e.getSource() == b9) {
			String label = b9.getLabel();
			if (b6.getLabel().equals("")) {
				b6.setLabel(label);
				b9.setLabel("");
			}
			if (b8.getLabel().equals("")) {
				b8.setLabel(label);
				b9.setLabel("");
			}
		}

		if (b1.getLabel().equals("A") && b2.getLabel().equals("B") && b3.getLabel().equals("C") && b4.getLabel().equals("D") && b5.getLabel().equals("E") && b6.getLabel().equals("F") && b7.getLabel().equals("G") && b8.getLabel().equals("H") && b9.getLabel().equals("")) {
			JOptionPane.showMessageDialog(this, "Congratulations! You won.");
		}
	}

	public static void main(String[] args) {
		new AlphabetGame();
	}
}


//Ping-Pong Game

//Ball class(Make a Different class)

package Simplilearn;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.Random;

public class Ball implements Runnable {

	// global variables
	int x, y, xDirection, yDirection;

	int p1score, p2score;

	Paddle p1 = new Paddle(10, 25, 1);
	Paddle p2 = new Paddle(485, 25, 2);

	Rectangle ball;

	public Ball(int x, int y) {
		p1score = p2score = 0;
		this.x = x;
		this.y = y;

		// Set ball moving randomly
		Random r = new Random();
		int rXDir = r.nextInt(1);
		if (rXDir == 0)
			rXDir--;
		setXDirection(rXDir);

		int rYDir = r.nextInt(1);
		if (rYDir == 0)
			rYDir--;
		setYDirection(rYDir);

		// create "ball"
		ball = new Rectangle(this.x, this.y, 15, 15);
	}

	public void setXDirection(int xDir) {
		xDirection = xDir;
	}

	public void setYDirection(int yDir) {
		yDirection = yDir;
	}

	public void draw(Graphics g) {
		g.setColor(Color.WHITE);
		g.fillRect(ball.x, ball.y, ball.width, ball.height);
	}

	public void collision() {
		if (ball.intersects(p1.paddle))
			setXDirection(+1);
		if (ball.intersects(p2.paddle))
			setXDirection(-1);
	}

	public void move() {
		collision();
		ball.x += xDirection;
		ball.y += yDirection;
		// bounce the ball when it hits the edge of the screen
		if (ball.x <= 0) {
			setXDirection(+1);
			p2score++;

		}
		if (ball.x >= 485) {
			setXDirection(-1);
			p1score++;
		}

		if (ball.y <= 15) {
			setYDirection(+1);
		}

		if (ball.y >= 385) {
			setYDirection(-1);
		}
	}

	@Override
	public void run() {
		try {
			while (true) {
				move();
				Thread.sleep(8);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}

	}

}

//Paddle class(Make a Different class)

package Simplilearn;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;

public class Paddle implements Runnable {

	int x, y, yDirection, id;

	Rectangle paddle;

	public Paddle(int x, int y, int id) {
		this.x = x;
		this.y = y;
		this.id = id;
		paddle = new Rectangle(x, y, 10, 50);
	}

	public void keyPressed(KeyEvent e) {
		switch (id) {
		default:
			System.out.println("Please enter a Valid ID in paddle contructor");
			break;
		case 1:
			if (e.getKeyCode() == KeyEvent.VK_W) {
				setYDirection(-1);
			}
			if (e.getKeyCode() == KeyEvent.VK_S) {
				setYDirection(1);

				break;
			}
		case 2:
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				setYDirection(-1);
			}
			if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				setYDirection(1);
			}
			break;
		}
	}

	public void keyReleased(KeyEvent e) {
		switch (id) {
		default:
			System.out.println("Please enter a Valid ID in paddle contructor");
			break;
		case 1:
			if (e.getKeyCode() == e.VK_UP) {
				setYDirection(0);
			}
			if (e.getKeyCode() == e.VK_DOWN) {
				setYDirection(0);
			}
			break;
		case 2:

			if (e.getKeyCode() == e.VK_W) {
				setYDirection(0);
			}
			if (e.getKeyCode() == e.VK_S) {
				setYDirection(0);
			}
			break;
		}
	}

	public void setYDirection(int yDir) {
		yDirection = yDir;
	}

	public void move() {
		paddle.y += yDirection;
		if (paddle.y <= 15)
			paddle.y = 15;
		if (paddle.y >= 340)
			paddle.y = 340;
	}

	public void draw(Graphics g) {
		switch (id) {
		default:
			System.out.println("Please enter a Valid ID in paddle contructor");
			break;
		case 1:
			g.setColor(Color.CYAN);
			g.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
			break;
		case 2:
			g.setColor(Color.pink);
			g.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
			break;
		}
	}

	@Override
	public void run() {
		try {
			while (true) {
				move();
				Thread.sleep(7);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
	}

}

//Pong class(Make a Different class)

package Simplilearn;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.*;

public class Pong extends JFrame {

	// screen size variables.
	int gWidth = 500;
	int gHeight = 400;
	Dimension screenSize = new Dimension(gWidth, gHeight);

	Image dbImage;
	Graphics dbGraphics;

	// ball object
	static Ball b = new Ball(250, 200);

	// constructor for window
	public Pong() {
		this.setTitle("Pong!");
		this.setSize(screenSize);
		this.setResizable(false);
		this.setVisible(true);
		this.setBackground(Color.DARK_GRAY);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.addKeyListener(new AL());
	}

	public static void main(String[] args) {
		Pong pg = new Pong();

		// create and start threads.
		Thread ball = new Thread(b);
		ball.start();
		Thread p1 = new Thread(b.p1);
		Thread p2 = new Thread(b.p2);
		p2.start();
		p1.start();

	}

	@Override
	public void paint(Graphics g) {
		dbImage = createImage(getWidth(), getHeight());
		dbGraphics = dbImage.getGraphics();
		draw(dbGraphics);
		g.drawImage(dbImage, 0, 0, this);
	}

	public void draw(Graphics g) {
		b.draw(g);
		b.p1.draw(g);
		b.p2.draw(g);

		g.setColor(Color.WHITE);
		g.drawString("" + b.p1score, 15, 20);
		g.drawString("" + b.p2score, 385, 20);

		repaint();
	}

	public class AL extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
			b.p1.keyPressed(e);
			b.p2.keyPressed(e);
		}

		@Override
		public void keyReleased(KeyEvent e) {
			b.p1.keyReleased(e);
			b.p2.keyReleased(e);
		}

	}
}
